
spring.application.name=Fooddelivery

# JWT configuration (required by JwtTokenProvider)
# NOTE: change the secret to a secure value for production. It must be long enough for HMAC-SHA signing.
jwt.secret=ChangeMeToASecureRandomStringWithSufficientLength012345
jwt.expiration=3600000

# H2 console and datasource (file-backed local store so data persists across restarts)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# Use a file-based H2 database stored under ./data/fooddelivery (relative to working dir)
spring.datasource.url=jdbc:h2:file:./data/fooddelivery;DB_CLOSE_DELAY=-1;AUTO_SERVER=TRUE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# Explicit Hibernate dialect for H2 to avoid autodetection issues during startup
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

# Also provide the Jakarta persistence JDBC URL as a fallback for some environments
jakarta.persistence.jdbc.url=jdbc:h2:file:./data/fooddelivery;DB_CLOSE_DELAY=-1;AUTO_SERVER=TRUE

# Run application on a non-default port if 8080 is occupied locally
server.port=8081

# Auto-load SQL files from src/main/resources/data on startup (demo/dev only)
# WARNING: This will run any SQL in that folder on application start. Keep gated to dev for production.
spring.sql.init.mode=never
spring.sql.init.encoding=UTF-8

# Restrict springdoc scanning to controller package to avoid scanning JPA entities which can cause schema generation errors
springdoc.packages-to-scan=com.foodordering.controller
# Also set the camelCase property name which some springdoc versions expect
springdoc.packagesToScan=com.foodordering.controller
